variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE
  IMAGE_LATEST: "latest"

stages:
  - build
  - push
  - deploy

build_image:
  stage: build
  tags:
    - fusion
    - local
    - quran
    - nodejs
  only:
    - main
  before_script:
    - export PACKAGE_JSON_APP_VERSION=$(cat package.json | jq -r .version)
    - export APP_VERSION=$PACKAGE_JSON_APP_VERSION.$CI_PIPELINE_IID
    - echo "APP_VERSION=$APP_VERSION" >> build.env
  script:
    - docker build -t $IMAGE_NAME:$APP_VERSION ./
  artifacts:
    reports:
      dotenv: build.env

push_image:
  stage: push
  needs:
    - build_image
  tags:
    - fusion
    - local
    - quran
    - nodejs
  only:
    - main
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$APP_VERSION

deploy_to_dev:
  stage: deploy
  tags:
    - fusion
    - local
    - quran
    - nodejs
  only:
    - main
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -t rsa $SERVER_HOST > ~/.ssh/known_hosts
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $SERVER_USER@$SERVER_HOST "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"

  environment:
    name: development
    deployment_tier: development
    url: http://localhost:3000
